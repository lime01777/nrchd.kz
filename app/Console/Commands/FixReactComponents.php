<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class FixReactComponents extends Command
{
    protected $signature = 'fix:react-components';
    protected $description = '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö (t() —Ñ—É–Ω–∫—Ü–∏—è, usePage –∏–º–ø–æ—Ä—Ç)';

    public function handle()
    {
        $this->info('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        
        $jsxFiles = File::glob(resource_path('js/**/*.jsx'));
        $fixedCount = 0;
        
        foreach ($jsxFiles as $file) {
            $content = File::get($file);
            $originalContent = $content;
            $fileFixed = false;
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ t() —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            if (str_contains($content, 't(') && !str_contains($content, 'const t = ')) {
                $content = $this->addTranslationFunction($content);
                $fileFixed = true;
            }
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ usePage –∏–º–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            if (str_contains($content, 'usePage()') && !preg_match('/import.*usePage.*from.*@inertiajs/', $content)) {
                $content = $this->addUsePageImport($content);
                $fileFixed = true;
            }
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ route() –≤—ã–∑–æ–≤–æ–≤ –±–µ–∑ locale
            if (preg_match('/route\([\'"][^\'"]+[\'"]\)/', $content) && 
                !str_contains($content, 'route(') && str_contains($content, '{ locale }')) {
                $content = $this->fixRouteCalls($content);
                $fileFixed = true;
            }
            
            if ($fileFixed) {
                File::put($file, $content);
                $fixedCount++;
                $this->info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: " . basename($file));
            }
        }
        
        $this->info("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {$fixedCount}");
        
        return 0;
    }
    
    private function addTranslationFunction($content)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ usePage –∏–º–ø–æ—Ä—Ç
        if (str_contains($content, 'import.*usePage')) {
            // –î–æ–±–∞–≤–ª—è–µ–º t() —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ usePage
            $pattern = '/(import.*usePage.*from.*@inertiajs.*react.*;)/';
            $replacement = '$1' . "\n" . '    const { translations } = usePage().props;' . "\n" . '    const t = (key, fallback = \'\') => translations?.[key] || fallback;';
            $content = preg_replace($pattern, $replacement, $content);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º usePage –∏–º–ø–æ—Ä—Ç –∏ t() —Ñ—É–Ω–∫—Ü–∏—é
            $pattern = '/(import.*from.*@inertiajs.*react.*;)/';
            $replacement = '$1' . "\n" . 'import { usePage } from \'@inertiajs/react\';' . "\n" . '    const { translations } = usePage().props;' . "\n" . '    const t = (key, fallback = \'\') => translations?.[key] || fallback;';
            $content = preg_replace($pattern, $replacement, $content);
        }
        
        return $content;
    }
    
    private function addUsePageImport($content)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ usePage –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
        if (preg_match('/import.*\{.*usePage.*\}.*from.*@inertiajs/', $content)) {
            return $content; // –£–∂–µ –µ—Å—Ç—å
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º usePage –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–º–ø–æ—Ä—Ç–∞–º –∏–∑ @inertiajs/react
        $pattern = '/import\s+\{([^}]*)\}\s+from\s+[\'"]@inertiajs\/react[\'"]/';
        if (preg_match($pattern, $content)) {
            $content = preg_replace($pattern, 'import { $1, usePage } from \'@inertiajs/react\'', $content);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
            $pattern = '/(import.*from.*@inertiajs.*react.*;)/';
            $replacement = '$1' . "\n" . 'import { usePage } from \'@inertiajs/react\';';
            $content = preg_replace($pattern, $replacement, $content);
        }
        
        return $content;
    }
    
    private function fixRouteCalls($content)
    {
        // –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç locale –ø–∞—Ä–∞–º–µ—Ç—Ä
        $routesRequiringLocale = [
            'home', 'news', 'about', 'contacts', 'services', 'documents', 'vacancies',
            'medical.education', 'medical.science', 'medical.accreditation', 'medical.rating',
            'medical.statistics', 'human.resources', 'electronic.health', 'drug.policy',
            'primary.healthcare', 'health.rate', 'health.accounts', 'strategic.initiatives',
            'bioethics', 'clinical.protocols', 'center.prevention', 'direction.tech.competence',
            'branches.astana', 'branches.almaty', 'branches.abay', 'branches.akmola',
            'branches.aktobe', 'branches.almatyregion', 'branches.atyrau', 'branches.east',
            'branches.zhambyl', 'branches.zhetisu', 'branches.west', 'branches.karaganda',
            'branches.kostanay', 'branches.kyzylorda', 'branches.mangistau', 'branches.pavlodar',
            'branches.north', 'branches.turkestan', 'branches.ulytau', 'branches.shymkent',
            'about.centre', 'about.contacts', 'about.faq', 'about.partners', 'salidat.kairbekova',
            'vacancy.jobs', 'services.training', 'services.adsEvaluation', 'services.healthTechAssessment',
            'services.drugExpertise', 'services.educationPrograms', 'services.medicalExpertise',
            'services.accreditation', 'services.postAccreditationMonitoring'
        ];
        
        foreach ($routesRequiringLocale as $route) {
            $pattern = "/route\\(['\"]" . preg_quote($route, '/') . "['\"]\\)/";
            $replacement = "route('{$route}', { locale })";
            $content = preg_replace($pattern, $replacement, $content);
        }
        
        return $content;
    }
}
