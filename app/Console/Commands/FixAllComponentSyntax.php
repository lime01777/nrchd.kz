<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class FixAllComponentSyntax extends Command
{
    protected $signature = 'fix:all-component-syntax';
    protected $description = 'Fix all component syntax errors';

    public function handle()
    {
        $this->info('üîß Fixing all component syntax errors...');
        
        $jsxFiles = $this->findJsxFiles();
        $this->info("Found " . count($jsxFiles) . " JSX files to check");
        
        $totalFixes = 0;
        
        foreach ($jsxFiles as $file) {
            $fixes = $this->fixFile($file);
            $totalFixes += $fixes;
            
            if ($fixes > 0) {
                $this->line("  ‚úÖ {$file}: {$fixes} fixes");
            }
        }
        
        $this->info("‚úÖ Completed! Fixed {$totalFixes} syntax errors.");
        
        return 0;
    }
    
    protected function findJsxFiles()
    {
        $files = [];
        $directories = [
            'resources/js/Components',
            'resources/js/Pages',
            'resources/js/Layouts'
        ];
        
        foreach ($directories as $dir) {
            if (File::exists($dir)) {
                $jsxFiles = File::glob($dir . '/**/*.jsx');
                $files = array_merge($files, $jsxFiles);
            }
        }
        
        return $files;
    }
    
    protected function fixFile($filePath)
    {
        $content = File::get($filePath);
        $originalContent = $content;
        $fixes = 0;
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç: import { { Head }, usePage }
        $content = preg_replace('/import\s+\{\s*\{\s*([^}]+)\s*\}\s*,\s*usePage\s*\}\s+from/', 'import { $1, usePage } from', $content);
        if ($content !== $originalContent) {
            $fixes++;
            $originalContent = $content;
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ t
        $content = preg_replace('/\/\/ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\s+const t = \(key, fallback = \'\'\) => \{\s+return translations\?\.[key\] \|\| fallback;\s+\};\s+\/\/ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\s+const t = \(key, fallback = \'\'\) => \{\s+return translations\?\.[key\] \|\| fallback;\s+\};\s+\)\s*\{/', '// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    const t = (key, fallback = \'\') => {
        return translations?.[key] || fallback;
    };', $content);
        if ($content !== $originalContent) {
            $fixes++;
            $originalContent = $content;
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        $content = preg_replace('/\)\s*\{(\s*return)/', '$1', $content);
        if ($content !== $originalContent) {
            $fixes++;
            $originalContent = $content;
        }
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏
        $content = preg_replace('/\)\s*\{(\s*return\s*<)/', '$1', $content);
        if ($content !== $originalContent) {
            $fixes++;
            $originalContent = $content;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if ($fixes > 0) {
            File::put($filePath, $content);
        }
        
        return $fixes;
    }
}
