<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Route;

class FixNonLocalizedRoutes extends Command
{
    protected $signature = 'fix:non-localized-routes';
    protected $description = '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∏—Ö –≤ localized.php';

    public function handle()
    {
        $this->info('üõ£Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
        
        $routes = Route::getRoutes();
        $nonLocalizedRoutes = [];
        
        foreach ($routes as $route) {
            $uri = $route->uri();
            $methods = $route->methods();
            
            // –ò—Å–∫–ª—é—á–∞–µ–º API, –∞–¥–º–∏–Ω, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
            if (!str_contains($uri, '{locale}') && 
                !str_starts_with($uri, 'api/') && 
                !str_starts_with($uri, 'admin/') && 
                !str_starts_with($uri, 'sanctum/') && 
                !str_starts_with($uri, 'translations/') &&
                !str_starts_with($uri, 'login') &&
                !str_starts_with($uri, 'register') &&
                !str_starts_with($uri, 'forgot-password') &&
                !str_starts_with($uri, 'reset-password') &&
                !str_starts_with($uri, 'confirm-password') &&
                !str_starts_with($uri, 'verify-email') &&
                !str_starts_with($uri, 'logout') &&
                !str_starts_with($uri, 'change-language') &&
                $uri !== '' &&
                $uri !== 'up') {
                
                $nonLocalizedRoutes[] = [
                    'uri' => $uri,
                    'methods' => $methods,
                    'name' => $route->getName(),
                    'action' => $route->getActionName()
                ];
            }
        }
        
        if (empty($nonLocalizedRoutes)) {
            $this->info('‚úÖ –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã!');
            return 0;
        }
        
        $this->info("–ù–∞–π–¥–µ–Ω–æ –Ω–µ–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: " . count($nonLocalizedRoutes));
        
        // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π localized.php
        $localizedPath = base_path('routes/localized.php');
        $localizedContent = File::get($localizedPath);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        $newRoutes = $this->generateLocalizedRoutes($nonLocalizedRoutes);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π –≥—Ä—É–ø–ø—ã
        $pattern = '/(\s*}\); \/\/ –ö–æ–Ω–µ—Ü –≥—Ä—É–ø–ø—ã –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤)/';
        $replacement = $newRoutes . "\n\n    " . '$1';
        
        if (preg_match($pattern, $localizedContent)) {
            $localizedContent = preg_replace($pattern, $replacement, $localizedContent);
        } else {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
            $localizedContent = str_replace(
                "\n});",
                $newRoutes . "\n});",
                $localizedContent
            );
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        File::put($localizedPath, $localizedContent);
        
        $this->info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ " . count($nonLocalizedRoutes) . " –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤");
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ web.php
        $this->removeOldRoutes($nonLocalizedRoutes);
        
        return 0;
    }
    
    private function generateLocalizedRoutes($routes)
    {
        $output = "\n    // === –ù–ï–õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===\n";
        
        foreach ($routes as $route) {
            $uri = $route['uri'];
            $name = $route['name'];
            $action = $route['action'];
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            if (str_contains($action, 'Controller@')) {
                // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                $output .= $this->generateControllerRoute($uri, $name, $action);
            } else {
                // Closure
                $output .= $this->generateClosureRoute($uri, $name);
            }
        }
        
        return $output;
    }
    
    private function generateControllerRoute($uri, $name, $action)
    {
        $controller = str_replace('App\Http\Controllers\\', '', $action);
        $method = substr($controller, strrpos($controller, '@') + 1);
        $controller = substr($controller, 0, strrpos($controller, '@'));
        
        return "    Route::get('/{$uri}', [\\App\\Http\\Controllers\\{$controller}::class, '{$method}'])->name('{$name}');\n";
    }
    
    private function generateClosureRoute($uri, $name)
    {
        return "    Route::get('/{$uri}', function (\$locale) {\n" .
               "        return Inertia::render('" . $this->guessComponentName($uri) . "', [\n" .
               "            'locale' => \$locale,\n" .
               "            'translations' => TranslationService::getForPage('" . $this->guessPageKey($uri) . "', \$locale),\n" .
               "        ]);\n" .
               "    })->name('{$name}');\n";
    }
    
    private function guessComponentName($uri)
    {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        $parts = explode('/', $uri);
        $lastPart = end($parts);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º kebab-case –≤ PascalCase
        $componentName = str_replace('-', '', ucwords($lastPart, '-'));
        
        return $componentName;
    }
    
    private function guessPageKey($uri)
    {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URI –≤ –∫–ª—é—á —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return str_replace('-', '_', $uri);
    }
    
    private function removeOldRoutes($routes)
    {
        $webPath = base_path('routes/web.php');
        $webContent = File::get($webPath);
        
        foreach ($routes as $route) {
            $uri = $route['uri'];
            $name = $route['name'];
            
            // –£–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ web.php
            $pattern = "/Route::get\('\/" . preg_quote($uri, '/') . "'.*?\)->name\('" . preg_quote($name, '/') . "'\);/s";
            $webContent = preg_replace($pattern, '', $webContent);
        }
        
        // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        $webContent = preg_replace('/\n\s*\n\s*\n/', "\n\n", $webContent);
        
        File::put($webPath, $webContent);
        
        $this->info("‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ web.php");
    }
}
