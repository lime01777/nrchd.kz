<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class UpdateComponentTranslations extends Command
{
    protected $signature = 'update:component-translations {--dry-run : Show what would be changed without making changes}';
    protected $description = 'Update component translations to use the new translation system';

    protected $translations = [
        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' => 'directions',
        '–û –Ω–∞—Å' => 'about',
        '–ù–æ–≤–æ—Å—Ç–∏' => 'news',
        '–î–æ–∫—É–º–µ–Ω—Ç—ã' => 'documents',
        '–£—Å–ª—É–≥–∏' => 'services',
        '–ö–æ–Ω—Ç–∞–∫—Ç—ã' => 'contacts',
        '–í–∞–∫–∞–Ω—Å–∏–∏' => 'vacancies',
        '–Ø–∑—ã–∫' => 'language',
        '–í–æ–π—Ç–∏' => 'login',
        '–í—ã–π—Ç–∏' => 'logout',
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' => 'directions.medical_education',
        '–ö–∞–¥—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' => 'directions.human_resources',
        '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ' => 'directions.electronic_health',
        '–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è' => 'directions.accreditation',
        '–û—Ü–µ–Ω–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' => 'directions.health_tech_assessments',
        '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã' => 'directions.clinical_protocols',
        '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ' => 'directions.strategic_initiatives',
        '–†–µ–π—Ç–∏–Ω–≥ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π' => 'directions.medical_rating',
        '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –Ω–∞—É–∫–∞' => 'directions.medical_science',
        '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ø–æ –±–∏–æ—ç—Ç–∏–∫–µ' => 'directions.bioethics',
        '–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞' => 'directions.drug_policy',
        '–ü–µ—Ä–≤–∏—á–Ω–∞—è –º–µ–¥–∏–∫–æ-—Å–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å' => 'directions.primary_healthcare',
        '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' => 'directions.health_accounts',
        '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' => 'directions.medical_statistics',
        '–û—Ç—Ä–∞—Å–ª–µ–≤–æ–π —Ü–µ–Ω—Ç—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π' => 'directions.tech_competence',
        '–¶–µ–Ω—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è' => 'directions.center_prevention',
        
        // –û —Ü–µ–Ω—Ç—Ä–µ
        '–û –¶–µ–Ω—Ç—Ä–µ' => 'about.center',
        '–°–∞–ª–∏–¥–∞—Ç –ö–∞–∏—Ä–±–µ–∫–æ–≤–∞' => 'about.salidat_kairbekova',
        '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã' => 'about.faq',
        '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' => 'about.contact_info',
        '–ü–∞—Ä—Ç–Ω–µ—Ä—ã' => 'about.partners',
        
        // –£—Å–ª—É–≥–∏
        '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö —Ü–∏–∫–ª–æ–≤ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é' => 'services.training',
        '–û—Ü–µ–Ω–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' => 'services.ads_evaluation',
        '–û—Ü–µ–Ω–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' => 'services.health_tech_assessment',
        '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤' => 'services.drug_expertise',
        '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –Ω–∞—É—á–Ω–æ-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' => 'services.education_programs',
        '–ù–∞—É—á–Ω–æ-–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞' => 'services.medical_expertise',
        '–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' => 'services.accreditation',
        '–ü–æ—Å—Ç–∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' => 'services.post_accreditation_monitoring',
        
        // –ö–∞—Ç–∞–ª–æ–≥
        '–ö–∞—Ç–∞–ª–æ–≥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º' => 'catalog.educational_programs',
        
        // –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        '–ó–∞–∫—Ä—ã—Ç—å' => 'close',
        '–û—Ç–º–µ–Ω–∞' => 'cancel',
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' => 'confirm',
        '–£–¥–∞–ª–∏—Ç—å' => 'delete',
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' => 'edit',
        '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' => 'save',
        '–ó–∞–≥—Ä—É–∑–∏—Ç—å' => 'upload',
        '–°–∫–∞—á–∞—Ç—å' => 'download',
        '–ü–æ–∏—Å–∫' => 'search',
        '–§–∏–ª—å—Ç—Ä' => 'filter',
        '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞' => 'sort',
        '–ü–æ–∫–∞–∑–∞—Ç—å' => 'show',
        '–°–∫—Ä—ã—Ç—å' => 'hide',
        '–î–∞–ª–µ–µ' => 'next',
        '–ù–∞–∑–∞–¥' => 'back',
        '–ü–µ—Ä–≤—ã–π' => 'first',
        '–ü–æ—Å–ª–µ–¥–Ω–∏–π' => 'last',
        '–ü—Ä–µ–¥—ã–¥—É—â–∏–π' => 'previous',
        '–°–ª–µ–¥—É—é—â–∏–π' => 'next_page',
        
        // –°—Ç–∞—Ç—É—Å—ã
        '–ê–∫—Ç–∏–≤–Ω—ã–π' => 'status.active',
        '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π' => 'status.inactive',
        '–û–∂–∏–¥–∞–µ—Ç' => 'status.pending',
        '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' => 'status.completed',
        '–û—Ç–º–µ–Ω–µ–Ω–æ' => 'status.cancelled',
        
        // –í—Ä–µ–º—è
        '–°–µ–≥–æ–¥–Ω—è' => 'time.today',
        '–í—á–µ—Ä–∞' => 'time.yesterday',
        '–ó–∞–≤—Ç—Ä–∞' => 'time.tomorrow',
        '–ù–µ–¥–µ–ª—è' => 'time.week',
        '–ú–µ—Å—è—Ü' => 'time.month',
        '–ì–æ–¥' => 'time.year',
        
        // –î–æ–∫—É–º–µ–Ω—Ç—ã
        '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞' => 'document.title',
        '–û–ø–∏—Å–∞–Ω–∏–µ' => 'document.description',
        '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞' => 'document.file_size',
        '–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏' => 'document.upload_date',
        '–¢–∏–ø —Ñ–∞–π–ª–∞' => 'document.file_type',
        
        // –§–æ—Ä–º—ã
        '–ò–º—è' => 'form.name',
        'Email' => 'form.email',
        '–¢–µ–ª–µ—Ñ–æ–Ω' => 'form.phone',
        '–°–æ–æ–±—â–µ–Ω–∏–µ' => 'form.message',
        '–¢–µ–º–∞' => 'form.subject',
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' => 'form.submit',
        '–û—á–∏—Å—Ç–∏—Ç—å' => 'form.clear',
        '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' => 'form.required_field',
        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç' => 'form.invalid_format',
        
        // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' => 'admin.panel',
        '–ê–¥–º–∏–Ω' => 'admin.admin',
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' => 'admin.management',
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' => 'admin.settings',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' => 'admin.users',
        '–†–æ–ª–∏' => 'admin.roles',
        '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞' => 'admin.permissions',
        
        // –†–µ–≥–∏–æ–Ω—ã
        '–≥. –ê—Å—Ç–∞–Ω–∞' => 'regions.astana',
        '–≥. –ê–ª–º–∞—Ç—ã' => 'regions.almaty',
        '–ê–±–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.abay',
        '–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.akmola',
        '–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.aktobe',
        '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.almaty_region',
        '–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.atyrau',
        '–í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.east_kazakhstan',
        '–ñ–∞–º–±—ã–ª—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.zhambyl',
        '–ñ–µ—Ç—ã—Å—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.zhetisu',
        '–ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.west_kazakhstan',
        '–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.karaganda',
        '–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.kostanay',
        '–ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.kyzylorda',
        '–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.mangistau',
        '–ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.pavlodar',
        '–°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.north_kazakhstan',
        '–¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.turkestan',
        '–£–ª—ã—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' => 'regions.ulytau',
        '–≥. –®—ã–º–∫–µ–Ω—Ç' => 'regions.shymkent',
    ];

    public function handle()
    {
        $this->info('üîç Updating component translations...');
        
        $jsxFiles = $this->findJsxFiles();
        $this->info("Found " . count($jsxFiles) . " JSX files to process");
        
        $totalChanges = 0;
        
        foreach ($jsxFiles as $file) {
            $changes = $this->processFile($file);
            $totalChanges += $changes;
            
            if ($changes > 0) {
                $this->line("  ‚úÖ {$file}: {$changes} changes");
            }
        }
        
        if ($this->option('dry-run')) {
            $this->info("üîç Dry run completed. Would make {$totalChanges} changes.");
        } else {
            $this->info("‚úÖ Completed! Made {$totalChanges} changes.");
        }
        
        return 0;
    }
    
    protected function findJsxFiles()
    {
        $files = [];
        $directories = [
            'resources/js/Components',
            'resources/js/Pages',
            'resources/js/Layouts'
        ];
        
        foreach ($directories as $dir) {
            if (File::exists($dir)) {
                $jsxFiles = File::glob($dir . '/**/*.jsx');
                $files = array_merge($files, $jsxFiles);
            }
        }
        
        return $files;
    }
    
    protected function processFile($filePath)
    {
        $content = File::get($filePath);
        $originalContent = $content;
        $changes = 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç usePage –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!str_contains($content, 'usePage') && !str_contains($content, 'translations')) {
            $content = $this->addUsePageImport($content);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!str_contains($content, 'const t =') && !str_contains($content, 'translations')) {
            $content = $this->addTranslationFunction($content);
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã
        foreach ($this->translations as $russianText => $translationKey) {
            $patterns = [
                // title="–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç"
                '/title\s*=\s*["\']' . preg_quote($russianText, '/') . '["\']/',
                // title={"–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç"}
                '/title\s*=\s*\{["\']' . preg_quote($russianText, '/') . '["\']\}/',
                // "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç" –≤ JSX
                '/["\']' . preg_quote($russianText, '/') . '["\']/',
            ];
            
            foreach ($patterns as $pattern) {
                $replacement = $this->getReplacement($pattern, $russianText, $translationKey);
                $newContent = preg_replace($pattern, $replacement, $content);
                if ($newContent !== $content) {
                    $content = $newContent;
                    $changes++;
                }
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–µ dry-run
        if ($changes > 0 && !$this->option('dry-run')) {
            File::put($filePath, $content);
        }
        
        return $changes;
    }
    
    protected function addUsePageImport($content)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç usePage
        if (str_contains($content, 'usePage')) {
            return $content;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç usePage
        $importPattern = '/import\s+.*?from\s+[\'"]@inertiajs\/react[\'"];?/';
        if (preg_match($importPattern, $content)) {
            $content = preg_replace($importPattern, '$0', $content);
            $content = str_replace('from \'@inertiajs/react\';', 'from \'@inertiajs/react\';', $content);
            $content = str_replace('from "@inertiajs/react";', 'from "@inertiajs/react";', $content);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
            $content = "import { usePage } from '@inertiajs/react';\n" . $content;
        }
        
        return $content;
    }
    
    protected function addTranslationFunction($content)
    {
        // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        $functionPattern = '/function\s+(\w+)\s*\(/';
        if (preg_match($functionPattern, $content, $matches)) {
            $functionName = $matches[1];
            
            // –î–æ–±–∞–≤–ª—è–µ–º usePage –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            $translationCode = "
    const { translations } = usePage().props;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    const t = (key, fallback = '') => {
        return translations?.[key] || fallback;
    };
";
            
            $content = str_replace(
                "function {$functionName}(",
                "function {$functionName}(" . $translationCode,
                $content
            );
        }
        
        return $content;
    }
    
    protected function getReplacement($pattern, $russianText, $translationKey)
    {
        if (str_contains($pattern, 'title=')) {
            return "title={t('{$translationKey}', '{$russianText}')}";
        } else {
            return "{t('{$translationKey}', '{$russianText}')}";
        }
    }
}
