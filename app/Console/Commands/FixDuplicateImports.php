<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class FixDuplicateImports extends Command
{
    protected $signature = 'fix:duplicate-imports';
    protected $description = '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ JSX —Ñ–∞–π–ª–∞—Ö';

    public function handle()
    {
        $this->info('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...');
        
        $jsxFiles = File::glob(resource_path('js/**/*.jsx'));
        $fixedCount = 0;
        
        foreach ($jsxFiles as $file) {
            $content = File::get($file);
            $originalContent = $content;
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ usePage
            $content = $this->fixDuplicateUsePageImports($content);
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π t() —Ñ—É–Ω–∫—Ü–∏–∏
            $content = $this->fixDuplicateTFunction($content);
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π translations
            $content = $this->fixDuplicateTranslations($content);
            
            if ($content !== $originalContent) {
                File::put($file, $content);
                $fixedCount++;
                $this->info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: " . basename($file));
            }
        }
        
        $this->info("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {$fixedCount}");
        
        return 0;
    }
    
    private function fixDuplicateUsePageImports($content)
    {
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã usePage
        $lines = explode("\n", $content);
        $usePageImports = [];
        $otherImports = [];
        $inertiaImports = [];
        
        foreach ($lines as $line) {
            $trimmedLine = trim($line);
            
            if (str_contains($trimmedLine, 'import') && str_contains($trimmedLine, 'usePage')) {
                $usePageImports[] = $trimmedLine;
            } elseif (str_contains($trimmedLine, 'import') && str_contains($trimmedLine, '@inertiajs')) {
                $inertiaImports[] = $trimmedLine;
            } elseif (str_contains($trimmedLine, 'import')) {
                $otherImports[] = $trimmedLine;
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        $newLines = [];
        $usePageAdded = false;
        
        foreach ($lines as $line) {
            $trimmedLine = trim($line);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã usePage
            if (str_contains($trimmedLine, 'import') && str_contains($trimmedLine, 'usePage')) {
                if (!$usePageAdded) {
                    // –î–æ–±–∞–≤–ª—è–µ–º usePage –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–º–ø–æ—Ä—Ç—É –∏–∑ @inertiajs/react
                    foreach ($inertiaImports as $inertiaImport) {
                        if (str_contains($inertiaImport, '{') && str_contains($inertiaImport, '}')) {
                            // –£–∂–µ –µ—Å—Ç—å –∏–º–ø–æ—Ä—Ç —Å —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
                            if (!str_contains($inertiaImport, 'usePage')) {
                                $newImport = str_replace('}', ', usePage }', $inertiaImport);
                                $newLines[] = $newImport;
                            } else {
                                $newLines[] = $inertiaImport;
                            }
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
                            $newLines[] = "import { usePage } from '@inertiajs/react';";
                        }
                    }
                    $usePageAdded = true;
                }
                continue;
            }
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ t() –∏ translations –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if (str_contains($trimmedLine, 'const { translations }') && !str_contains($trimmedLine, 'function')) {
                continue;
            }
            if (str_contains($trimmedLine, 'const t = ') && !str_contains($trimmedLine, 'function')) {
                continue;
            }
            
            $newLines[] = $line;
        }
        
        return implode("\n", $newLines);
    }
    
    private function fixDuplicateTFunction($content)
    {
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è t() —Ñ—É–Ω–∫—Ü–∏–∏
        $pattern = '/const t = \(key, fallback = \'\'\) => translations\?\.[key\] \|\| fallback;\s*\n\s*const t = \(key, fallback = \'\'\) => translations\?\.[key\] \|\| fallback;/';
        $replacement = 'const t = (key, fallback = \'\') => translations?.[key] || fallback;';
        
        return preg_replace($pattern, $replacement, $content);
    }
    
    private function fixDuplicateTranslations($content)
    {
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è translations
        $pattern = '/const \{ translations \} = usePage\(\)\.props;\s*\n\s*const \{ translations \} = usePage\(\)\.props;/';
        $replacement = 'const { translations } = usePage().props;';
        
        return preg_replace($pattern, $replacement, $content);
    }
}
