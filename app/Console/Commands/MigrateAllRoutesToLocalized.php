<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class MigrateAllRoutesToLocalized extends Command
{
    protected $signature = 'migrate:routes-to-localized';
    protected $description = 'Migrate all routes from web.php to localized.php with language prefixes';

    public function handle()
    {
        $this->info('üîß Migrating all routes to localized.php with language prefixes...');
        
        // –ß–∏—Ç–∞–µ–º web.php
        $webContent = File::get('routes/web.php');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
        $routesToMigrate = $this->extractRoutes($webContent);
        
        // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π localized.php
        $localizedContent = File::get('routes/localized.php');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ localized.php
        $updatedLocalizedContent = $this->addRoutesToLocalized($localizedContent, $routesToMigrate);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π localized.php
        File::put('routes/localized.php', $updatedLocalizedContent);
        
        // –£–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ web.php
        $updatedWebContent = $this->removeRoutesFromWeb($webContent, $routesToMigrate);
        File::put('routes/web.php', $updatedWebContent);
        
        $this->info("üéâ Successfully migrated " . count($routesToMigrate) . " routes!");
        $this->info("‚úÖ Routes added to localized.php");
        $this->info("‚úÖ Routes removed from web.php");
        
        return 0;
    }
    
    private function extractRoutes($content)
    {
        $routes = [];
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        preg_match_all('/Route::get\([\'"`]([^\'"`]+)[\'"`],\s*function\s*\([^)]*\)\s*\{[^}]*return\s+Inertia::render\([\'"`]([^\'"`]+)[\'"`][^}]*\}\)->name\([\'"`]([^\'"`]+)[\'"`]\);/s', $content, $matches, PREG_SET_ORDER);
        
        foreach ($matches as $match) {
            $routes[] = [
                'path' => $match[1],
                'component' => $match[2],
                'name' => $match[3],
                'full_match' => $match[0]
            ];
        }
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ localized.php –∏–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        $excludeRoutes = [
            '/',
            '/admin',
            '/api',
            '/auth',
            '/storage',
            '/images',
            '/news-images',
            '/medical-tourism-conference',
            '/news-slider-demo',
            '/examples/google-drive',
            '/about-centre/vacancies'
        ];
        
        $routes = array_filter($routes, function($route) use ($excludeRoutes) {
            foreach ($excludeRoutes as $exclude) {
                if (strpos($route['path'], $exclude) === 0) {
                    return false;
                }
            }
            return true;
        });
        
        return $routes;
    }
    
    private function addRoutesToLocalized($localizedContent, $routes)
    {
        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π –≥—Ä—É–ø–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤)
        $insertPosition = strrpos($localizedContent, '    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –∑–¥–µ—Å—å —Å —Ç–µ–º –∂–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º');
        
        if ($insertPosition === false) {
            $insertPosition = strrpos($localizedContent, '});');
        }
        
        $newRoutes = "\n";
        foreach ($routes as $route) {
            $newRoutes .= "    // {$route['name']}\n";
            $newRoutes .= "    Route::get('{$route['path']}', function (\$locale) {\n";
            $newRoutes .= "        return Inertia::render('{$route['component']}', [\n";
            $newRoutes .= "            'locale' => \$locale,\n";
            $newRoutes .= "            'translations' => TranslationService::getForPage('" . $this->getPageKey($route['name']) . "', \$locale),\n";
            $newRoutes .= "        ]);\n";
            $newRoutes .= "    })->name('{$route['name']}');\n\n";
        }
        
        return substr_replace($localizedContent, $newRoutes, $insertPosition, 0);
    }
    
    private function removeRoutesFromWeb($content, $routes)
    {
        foreach ($routes as $route) {
            $content = str_replace($route['full_match'], '', $content);
        }
        
        // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        $content = preg_replace('/\n\s*\n\s*\n/', "\n\n", $content);
        
        return $content;
    }
    
    private function getPageKey($routeName)
    {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –∫–ª—é—á —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        $pageKey = str_replace('.', '_', $routeName);
        return $pageKey;
    }
}
