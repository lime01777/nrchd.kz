<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Artisan;
use App\Services\TranslationService;

class ProjectAudit extends Command
{
    protected $signature = 'project:audit {--fix : –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã}';
    protected $description = '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é';

    private $issues = [];
    private $suggestions = [];
    private $fixes = [];

    public function handle()
    {
        $this->info('üîç –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        $this->checkConfiguration();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        $this->checkRoutes();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        $this->checkDatabase();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        $this->checkTranslations();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ React
        $this->checkReactComponents();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        $this->checkFileSystem();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        $this->checkSecurity();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        $this->checkPerformance();
        
        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $this->displayResults();
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        if ($this->option('fix')) {
            $this->applyFixes();
        }
        
        return 0;
    }

    private function checkConfiguration()
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ APP_KEY
        if (empty(config('app.key'))) {
            $this->issues[] = '‚ùå APP_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ';
            $this->fixes[] = 'php artisan key:generate';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ APP_DEBUG
        if (config('app.debug') && config('app.env') === 'production') {
            $this->issues[] = '‚ö†Ô∏è APP_DEBUG –≤–∫–ª—é—á–µ–Ω –≤ production —Ä–µ–∂–∏–º–µ';
            $this->suggestions[] = '–û—Ç–∫–ª—é—á–∏—Ç—å APP_DEBUG –≤ production';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏
        if (config('app.locale') !== 'kz') {
            $this->issues[] = '‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–∫–∞–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ kz';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ timezone
        if (config('app.timezone') !== 'Asia/Almaty') {
            $this->suggestions[] = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å timezone –∫–∞–∫ Asia/Almaty –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞';
        }
    }

    private function checkRoutes()
    {
        $this->info('üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
        
        $routes = Route::getRoutes();
        $localizedRoutes = 0;
        $nonLocalizedRoutes = 0;
        
        foreach ($routes as $route) {
            $uri = $route->uri();
            if (str_contains($uri, '{locale}')) {
                $localizedRoutes++;
            } else {
                // –ò—Å–∫–ª—é—á–∞–µ–º API –∏ –∞–¥–º–∏–Ω –º–∞—Ä—à—Ä—É—Ç—ã
                if (!str_starts_with($uri, 'api/') && !str_starts_with($uri, 'admin/') && 
                    !str_starts_with($uri, 'sanctum/') && !str_starts_with($uri, 'translations/')) {
                    $nonLocalizedRoutes++;
                }
            }
        }
        
        if ($nonLocalizedRoutes > 0) {
            $this->issues[] = "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {$nonLocalizedRoutes} –ø—É–±–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –±–µ–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏";
        }
        
        $this->info("‚úÖ –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {$localizedRoutes}");
        $this->info("‚ö†Ô∏è –ù–µ–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {$nonLocalizedRoutes}");
    }

    private function checkDatabase()
    {
        $this->info('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            DB::connection()->getPdo();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            if (!Schema::hasTable('stored_translations')) {
                $this->issues[] = '‚ùå –¢–∞–±–ª–∏—Ü–∞ stored_translations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
                $this->fixes[] = 'php artisan migrate';
            } else {
                $count = DB::table('stored_translations')->count();
                $this->info("‚úÖ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –±–∞–∑–µ: {$count}");
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            $requiredTables = ['users', 'news', 'documents', 'vacancies'];
            foreach ($requiredTables as $table) {
                if (!Schema::hasTable($table)) {
                    $this->issues[] = "‚ùå –¢–∞–±–ª–∏—Ü–∞ {$table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
                }
            }
            
        } catch (\Exception $e) {
            $this->issues[] = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ' . $e->getMessage();
        }
    }

    private function checkTranslations()
    {
        $this->info('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤...');
        
        $languages = ['kz', 'ru', 'en'];
        $pages = ['home', 'news', 'about', 'contacts', 'services'];
        
        foreach ($languages as $lang) {
            foreach ($pages as $page) {
                try {
                    $translations = TranslationService::getForPage($page, $lang);
                    if (empty($translations)) {
                        $this->issues[] = "‚ö†Ô∏è –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {$page} –Ω–∞ —è–∑—ã–∫–µ {$lang}";
                    }
                } catch (\Exception $e) {
                    $this->issues[] = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è {$page}/{$lang}: " . $e->getMessage();
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        $langFiles = ['kz/common.php', 'ru/common.php', 'en/common.php'];
        foreach ($langFiles as $file) {
            $path = resource_path("lang/{$file}");
            if (!File::exists($path)) {
                $this->issues[] = "‚ùå –Ø–∑—ã–∫–æ–≤–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {$file}";
            }
        }
    }

    private function checkReactComponents()
    {
        $this->info('‚öõÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        
        $jsxFiles = File::glob(resource_path('js/**/*.jsx'));
        $issues = 0;
        
        foreach ($jsxFiles as $file) {
            $content = File::get($file);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t() —Ñ—É–Ω–∫—Ü–∏–∏
            if (str_contains($content, 't(') && !str_contains($content, 'const t = ')) {
                $this->issues[] = "‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {$file} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç t() –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏";
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ usePage –∏–º–ø–æ—Ä—Ç
            if (str_contains($content, 'usePage()') && !str_contains($content, 'import.*usePage')) {
                $this->issues[] = "‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {$file} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç usePage –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞";
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ route() –≤—ã–∑–æ–≤—ã –±–µ–∑ locale
            if (preg_match('/route\([\'"][^\'"]+[\'"]\)/', $content) && 
                !str_contains($content, 'route(') && str_contains($content, '{ locale }')) {
                $this->issues[] = "‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {$file} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç route() –±–µ–∑ locale –ø–∞—Ä–∞–º–µ—Ç—Ä–∞";
            }
        }
        
        $this->info("‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: " . count($jsxFiles));
    }

    private function checkFileSystem()
    {
        $this->info('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        $writableDirs = ['storage', 'bootstrap/cache', 'public/storage'];
        foreach ($writableDirs as $dir) {
            if (!is_writable($dir)) {
                $this->issues[] = "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {$dir} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏";
                $this->fixes[] = "chmod -R 775 {$dir}";
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        if (!is_link(public_path('storage'))) {
            $this->issues[] = '‚ùå –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ storage –Ω–µ —Å–æ–∑–¥–∞–Ω–∞';
            $this->fixes[] = 'php artisan storage:link';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤
        $logFile = storage_path('logs/laravel.log');
        if (File::exists($logFile) && File::size($logFile) > 50 * 1024 * 1024) { // 50MB
            $this->suggestions[] = '–õ–æ–≥ —Ñ–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å';
        }
    }

    private function checkSecurity()
    {
        $this->info('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        if (File::exists('.env') && !File::exists('.env.example')) {
            $this->suggestions[] = '–°–æ–∑–¥–∞—Ç—å .env.example —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ composer.lock
        if (!File::exists('composer.lock')) {
            $this->issues[] = '‚ùå composer.lock –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ package-lock.json
        if (!File::exists('package-lock.json')) {
            $this->issues[] = '‚ùå package-lock.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules
        if (!File::exists('node_modules')) {
            $this->issues[] = '‚ùå node_modules –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
            $this->fixes[] = 'npm install';
        }
    }

    private function checkPerformance()
    {
        $this->info('‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if (!File::exists(base_path('bootstrap/cache/packages.php'))) {
            $this->suggestions[] = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∫—ç—à –ø–∞–∫–µ—Ç–æ–≤: php artisan package:discover';
        }
        
        if (!File::exists(base_path('bootstrap/cache/services.php'))) {
            $this->suggestions[] = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∫—ç—à —Å–µ—Ä–≤–∏—Å–æ–≤: php artisan config:cache';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if (config('app.env') === 'production') {
            $this->suggestions[] = '–í production —Ä–µ–∂–∏–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: php artisan optimize';
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ node_modules
        if (File::exists('node_modules')) {
            $size = $this->getDirectorySize('node_modules');
            if ($size > 500 * 1024 * 1024) { // 500MB
                $this->suggestions[] = 'node_modules –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500MB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏';
            }
        }
    }

    private function getDirectorySize($path)
    {
        $size = 0;
        foreach (File::allFiles($path) as $file) {
            $size += $file->getSize();
        }
        return $size;
    }

    private function displayResults()
    {
        $this->newLine();
        $this->info('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
        $this->newLine();
        
        if (empty($this->issues) && empty($this->suggestions)) {
            $this->info('‚úÖ –ü—Ä–æ–µ–∫—Ç –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }
        
        if (!empty($this->issues)) {
            $this->error('üö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
            foreach ($this->issues as $issue) {
                $this->line($issue);
            }
            $this->newLine();
        }
        
        if (!empty($this->suggestions)) {
            $this->warn('üí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:');
            foreach ($this->suggestions as $suggestion) {
                $this->line($suggestion);
            }
            $this->newLine();
        }
        
        if (!empty($this->fixes)) {
            $this->info('üîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
            foreach ($this->fixes as $fix) {
                $this->line($fix);
            }
            $this->newLine();
        }
    }

    private function applyFixes()
    {
        $this->info('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
        
        foreach ($this->fixes as $fix) {
            $this->info("–í—ã–ø–æ–ª–Ω—è—é: {$fix}");
            try {
                if (str_starts_with($fix, 'php artisan')) {
                    Artisan::call(explode(' ', $fix)[2]);
                } elseif (str_starts_with($fix, 'npm')) {
                    exec($fix);
                } elseif (str_starts_with($fix, 'chmod')) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º chmod –¥–ª—è Windows
                    $this->warn("–ü—Ä–æ–ø—É—Å–∫–∞—é chmod –∫–æ–º–∞–Ω–¥—É (Windows)");
                }
            } catch (\Exception $e) {
                $this->error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {$fix}: " . $e->getMessage());
            }
        }
        
        $this->info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    }
}
