<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

class DeployTranslations extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'deploy:translations {--force : –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîß –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–≤–æ–¥–æ–≤...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        $translationsExists = Schema::hasTable('translations');
        $storedTranslationsExists = Schema::hasTable('stored_translations');

        $this->info("üìä –°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü:");
        $this->info("   - translations: " . ($translationsExists ? "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" : "‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"));
        $this->info("   - stored_translations: " . ($storedTranslationsExists ? "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" : "‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"));

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É translations –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!$translationsExists) {
            $this->info('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É translations...');
            Schema::create('translations', function ($table) {
                $table->id();
                $table->text('original_text');
                $table->text('translated_text');
                $table->string('source_language', 10)->default('ru');
                $table->string('target_language', 10);
                $table->string('content_type')->nullable();
                $table->unsignedBigInteger('content_id')->nullable();
                $table->timestamps();
                
                // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                $table->index(['original_text', 'source_language', 'target_language']);
                $table->index(['content_type', 'content_id']);
            });
            $this->info('‚úÖ –¢–∞–±–ª–∏—Ü–∞ translations —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            $this->info('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ translations —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É stored_translations –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!$storedTranslationsExists) {
            $this->info('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É stored_translations...');
            Schema::create('stored_translations', function ($table) {
                $table->id();
                $table->text('original_text');
                $table->text('translated_text');
                $table->string('target_language', 10);
                $table->string('page_url')->nullable();
                $table->string('hash', 32)->unique();
                $table->boolean('is_verified')->default(false);
                $table->timestamps();
                
                // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                $table->index(['hash']);
                $table->index(['target_language']);
                $table->index(['page_url']);
            });
            $this->info('‚úÖ –¢–∞–±–ª–∏—Ü–∞ stored_translations —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            $this->info('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ stored_translations —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –û—Ç–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        $this->info('üìã –û—Ç–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ...');
        
        $migrations = [
            '2025_08_15_125231_create_translations_table',
            '2025_08_15_125236_create_stored_translations_table',
            '2025_08_17_173456_fix_translations_tables'
        ];

        foreach ($migrations as $migration) {
            $exists = DB::table('migrations')->where('migration', $migration)->exists();
            if (!$exists) {
                DB::table('migrations')->insert([
                    'migration' => $migration,
                    'batch' => DB::table('migrations')->max('batch') + 1
                ]);
                $this->info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {$migration} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è");
            } else {
                $this->info("‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è {$migration} —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è");
            }
        }

        $this->info('üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
        return Command::SUCCESS;
    }
}
