const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions = ['.jsx', '.js']) {
    let results = [];
    const list = fs.readdirSync(dir);
    
    list.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat && stat.isDirectory()) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
            if (!['node_modules', '.git', 'vendor', 'storage', 'bootstrap'].includes(file)) {
                results = results.concat(findFiles(filePath, extensions));
            }
        } else {
            const ext = path.extname(file);
            if (extensions.includes(ext)) {
                results.push(filePath);
            }
        }
    });
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—à–∏–±–∫–∏
function checkFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ layout —Ñ—É–Ω–∫—Ü–∏–∏
    const hasLayout = content.includes('.layout =');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ t –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const hasTFunction = /const\s+t\s*=\s*\(.*\)\s*=>/.test(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t –≤ layout
    const usesTInLayout = hasLayout && /\.layout\s*=\s*.*t\(/.test(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ t
    const hasGlobalT = /const\s+t\s*=\s*\(.*\)\s*=>\s*\{[\s\S]*?window\.__INERTIA_PROPS__/.test(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const usesTOutsideComponent = /t\(/g.test(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ export default function
    const hasExportDefault = /export\s+default\s+function/.test(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ usePage
    const hasUsePage = /usePage\(\)/.test(content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ window.__INERTIA_PROPS__
    const hasInertiaProps = /window\.__INERTIA_PROPS__/.test(content);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    lines.forEach((line, index) => {
        const lineNumber = index + 1;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t –≤ layout —Ñ—É–Ω–∫—Ü–∏–∏
        if (line.includes('.layout =') && line.includes('t(') && !hasGlobalT) {
            issues.push({
                line: lineNumber,
                type: 'ERROR',
                message: '–§—É–Ω–∫—Ü–∏—è t –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ layout, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ',
                code: line.trim()
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ t –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (line.includes('const t =') && hasExportDefault) {
            issues.push({
                line: lineNumber,
                type: 'WARNING',
                message: '–§—É–Ω–∫—Ü–∏—è t –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å layout',
                code: line.trim()
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if (line.includes('t(') && !hasTFunction && !hasGlobalT && !line.includes('//')) {
            issues.push({
                line: lineNumber,
                type: 'ERROR',
                message: '–§—É–Ω–∫—Ü–∏—è t –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
                code: line.trim()
            });
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
    if (hasLayout && !hasGlobalT && usesTOutsideComponent) {
        issues.push({
            line: 'GLOBAL',
            type: 'ERROR',
            message: '–§–∞–π–ª –∏–º–µ–µ—Ç layout —Ñ—É–Ω–∫—Ü–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç t, –Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è t –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
            code: '–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é t'
        });
    }
    
    return {
        filePath,
        issues,
        hasLayout,
        hasTFunction,
        hasGlobalT,
        usesTInLayout
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    let newContent = content;
    let fixed = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    const hasLayout = content.includes('.layout =');
    const hasGlobalT = /const\s+t\s*=\s*\(.*\)\s*=>\s*\{[\s\S]*?window\.__INERTIA_PROPS__/.test(content);
    const usesTInLayout = hasLayout && /\.layout\s*=\s*.*t\(/.test(content);
    
    if (hasLayout && usesTInLayout && !hasGlobalT) {
        // –ù–∞—Ö–æ–¥–∏–º –∏–º–ø–æ—Ä—Ç—ã
        const importIndex = lines.findIndex(line => line.startsWith('import'));
        const lastImportIndex = lines.findLastIndex(line => line.startsWith('import'));
        
        // –ù–∞—Ö–æ–¥–∏–º export default function
        const exportIndex = lines.findIndex(line => line.includes('export default function'));
        
        if (importIndex !== -1 && exportIndex !== -1) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é t –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
            const globalTFunction = `
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
const t = (key, fallback = '') => {
    return window.__INERTIA_PROPS__?.translations?.[key] || fallback;
};`;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
            lines.splice(lastImportIndex + 1, 0, globalTFunction);
            
            // –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é t –Ω–∞ tComponent
            newContent = lines.join('\n');
            newContent = newContent.replace(
                /const\s+t\s*=\s*\(.*?\)\s*=>\s*\{[\s\S]*?translations\?\.[^\}]*\|\|.*?\};/g,
                '// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞\n    const tComponent = (key, fallback = \'\') => {\n        return translations?.[key] || fallback;\n    };'
            );
            
            // –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ tComponent
            newContent = newContent.replace(
                /(?<!\.layout\s*=.*)t\(/g,
                'tComponent('
            );
            
            fixed = true;
        }
    }
    
    return { fixed, newContent };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏ —Å const –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ t...\n');
    
    const jsxFiles = findFiles('./resources/js', ['.jsx', '.js']);
    const results = [];
    const fixedFiles = [];
    
    jsxFiles.forEach(filePath => {
        const result = checkFile(filePath);
        if (result.issues.length > 0) {
            results.push(result);
        }
    });
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (results.length === 0) {
        console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã. –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:\n`);
    
    results.forEach(result => {
        console.log(`üìÅ ${result.filePath}`);
        console.log(`   Layout: ${result.hasLayout ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –ì–ª–æ–±–∞–ª—å–Ω–∞—è t: ${result.hasGlobalT ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –õ–æ–∫–∞–ª—å–Ω–∞—è t: ${result.hasTFunction ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t –≤ layout: ${result.usesTInLayout ? '‚úÖ' : '‚ùå'}`);
        
        result.issues.forEach(issue => {
            const icon = issue.type === 'ERROR' ? '‚ùå' : '‚ö†Ô∏è';
            console.log(`   ${icon} –°—Ç—Ä–æ–∫–∞ ${issue.line}: ${issue.message}`);
            if (issue.code && issue.code !== '–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é t') {
                console.log(`      –ö–æ–¥: ${issue.code}`);
            }
        });
        console.log('');
    });
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    console.log('üîß –•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã? (y/n)');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã readline –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    console.log('\nüìù –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:');
    results.forEach(result => {
        if (result.hasLayout && result.usesTInLayout && !result.hasGlobalT) {
            console.log(`   - ${result.filePath}`);
            const fixResult = fixFile(result.filePath);
            if (fixResult.fixed) {
                console.log(`     ‚úÖ –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
                fixedFiles.push({ filePath: result.filePath, newContent: fixResult.newContent });
            }
        }
    });
    
    if (fixedFiles.length > 0) {
        console.log(`\nüíæ –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–∫—Ä–∏–ø—Ç–µ`);
        fixedFiles.forEach(file => {
            console.log(`\n// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è ${file.filePath}:`);
            console.log(`fs.writeFileSync('${file.filePath}', \`${file.newContent.replace(/`/g, '\\`')}\`);`);
        });
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main();
