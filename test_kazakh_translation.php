<?php

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 * –ó–∞–ø—É—Å–∫: php test_kazakh_translation.php
 */

require_once 'vendor/autoload.php';

use App\Services\AutoTranslationService;
use App\Models\StoredTranslation;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Laravel
$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

echo "üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫\n";
echo "==================================================\n\n";

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
echo "1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n";
try {
    $translationService = app(AutoTranslationService::class);
    echo "‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n";
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: " . $e->getMessage() . "\n";
    exit(1);
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...\n";
$languages = ['kz', 'ru', 'en'];
foreach ($languages as $lang) {
    $langPath = resource_path("lang/$lang");
    if (is_dir($langPath)) {
        $files = glob($langPath . '/*.php');
        echo "‚úÖ –Ø–∑—ã–∫ $lang: " . count($files) . " —Ñ–∞–π–ª–æ–≤\n";
    } else {
        echo "‚ùå –Ø–∑—ã–∫ $lang: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
    }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n";
try {
    $count = StoredTranslation::count();
    echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: $count –∑–∞–ø–∏—Å–µ–π\n";
    
    $languages = StoredTranslation::groupBy('target_language')
        ->selectRaw('target_language, count(*) as count')
        ->get();
    
    foreach ($languages as $lang) {
        echo "   - {$lang->target_language}: {$lang->count} –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n";
$config = config('app');
echo "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: " . ($config['locale'] ?? '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";
echo "‚úÖ Fallback —è–∑—ã–∫: " . ($config['fallback_locale'] ?? '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";

$googleKey = config('services.google.translate_api_key');
if ($googleKey) {
    echo "‚úÖ Google Translate API –∫–ª—é—á: –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n";
} else {
    echo "‚ö†Ô∏è  Google Translate API –∫–ª—é—á: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n";
}

// –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
echo "\n5. –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥...\n";
try {
    $testText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç";
    $translation = $translationService->translateText($testText, 'kz', 'ru');
    
    if ($translation !== $testText) {
        echo "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω: '$testText' ‚Üí '$translation'\n";
    } else {
        echo "‚ö†Ô∏è  –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç API –∫–ª—é—á–∞)\n";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
echo "\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware...\n";
$middlewarePath = app_path('Http/Middleware/AutoLanguageDetectionMiddleware.php');
if (file_exists($middlewarePath)) {
    echo "‚úÖ Middleware –Ω–∞–π–¥–µ–Ω\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Kernel
    $kernelPath = app_path('Http/Kernel.php');
    $kernelContent = file_get_contents($kernelPath);
    if (strpos($kernelContent, 'AutoLanguageDetectionMiddleware') !== false) {
        echo "‚úÖ Middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Kernel\n";
    } else {
        echo "‚ö†Ô∏è  Middleware –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Kernel\n";
    }
} else {
    echo "‚ùå Middleware –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
echo "\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤...\n";
$apiPath = base_path('routes/api.php');
$apiContent = file_get_contents($apiPath);
if (strpos($apiContent, 'TranslationAPIController') !== false) {
    echo "‚úÖ API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n";
} else {
    echo "‚ùå API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n";
}

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —É—Ç–∏–ª–∏—Ç—ã
echo "\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —É—Ç–∏–ª–∏—Ç—ã...\n";
$jsPath = resource_path('js/Utils/TranslationHelper.js');
if (file_exists($jsPath)) {
    echo "‚úÖ JavaScript —É—Ç–∏–ª–∏—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞\n";
} else {
    echo "‚ùå JavaScript —É—Ç–∏–ª–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
}

// –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã Artisan
echo "\n9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã Artisan...\n";
$commandPath = app_path('Console/Commands/TranslateAllTexts.php');
if (file_exists($commandPath)) {
    echo "‚úÖ –ö–æ–º–∞–Ω–¥–∞ Artisan –Ω–∞–π–¥–µ–Ω–∞\n";
    echo "   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php artisan translate:all --dry-run\n";
} else {
    echo "‚ùå –ö–æ–º–∞–Ω–¥–∞ Artisan –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
}

// –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MediaSlider
echo "\n10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MediaSlider...\n";
$componentPath = resource_path('js/Components/MediaSlider.jsx');
if (file_exists($componentPath)) {
    $componentContent = file_get_contents($componentPath);
    if (strpos($componentContent, 'window.translations') !== false) {
        echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã\n";
    } else {
        echo "‚ö†Ô∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã\n";
    }
} else {
    echo "‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
}

echo "\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
echo "\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
echo "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Google Translate API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n";
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: php artisan migrate\n";
echo "3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã: php artisan translate:all --dry-run\n";
echo "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f storage/logs/laravel.log\n";
echo "\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: KAZAKH_TRANSLATION_SETUP.md\n";
