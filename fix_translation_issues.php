<?php

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
 * –ó–∞–ø—É—Å–∫: php fix_translation_issues.php
 */

require_once 'vendor/autoload.php';

use App\Services\AutoTranslationService;
use App\Models\StoredTranslation;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Laravel
$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏\n";
echo "==============================================\n\n";

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n";
$config = config('app');
echo "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: " . ($config['locale'] ?? '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";
echo "‚úÖ Fallback —è–∑—ã–∫: " . ($config['fallback_locale'] ?? '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";

$googleKey = config('services.google.translate_api_key');
if ($googleKey) {
    echo "‚úÖ Google Translate API –∫–ª—é—á: –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n";
} else {
    echo "‚ö†Ô∏è  Google Translate API –∫–ª—é—á: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n";
    echo "   –î–æ–±–∞–≤—å—Ç–µ –≤ .env: GOOGLE_TRANSLATE_API_KEY=your_key\n";
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...\n";
$languages = ['kz', 'ru', 'en'];
$totalKeys = [];

foreach ($languages as $lang) {
    $langPath = resource_path("lang/$lang");
    if (is_dir($langPath)) {
        $files = glob($langPath . '/*.php');
        $langKeys = [];
        
        foreach ($files as $file) {
            $fileName = basename($file, '.php');
            $fileTranslations = include $file;
            if (is_array($fileTranslations)) {
                foreach ($fileTranslations as $key => $value) {
                    if (is_string($value)) {
                        $langKeys[] = "$fileName.$key";
                        $totalKeys[] = "$fileName.$key";
                    }
                }
            }
        }
        
        echo "‚úÖ –Ø–∑—ã–∫ $lang: " . count($files) . " —Ñ–∞–π–ª–æ–≤, " . count($langKeys) . " –∫–ª—é—á–µ–π\n";
    } else {
        echo "‚ùå –Ø–∑—ã–∫ $lang: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
    }
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n";
try {
    $count = StoredTranslation::count();
    echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: $count –∑–∞–ø–∏—Å–µ–π\n";
    
    $languages = StoredTranslation::groupBy('target_language')
        ->selectRaw('target_language, count(*) as count')
        ->get();
    
    foreach ($languages as $lang) {
        echo "   - {$lang->target_language}: {$lang->count} –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "\n";
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–∑–∞—Ö—Å–∫–æ–º —Ñ–∞–π–ª–µ
echo "\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–∑–∞—Ö—Å–∫–æ–º —Ñ–∞–π–ª–µ...\n";
$kzPath = resource_path("lang/kz/common.php");
if (file_exists($kzPath)) {
    $kzTranslations = include $kzPath;
    $duplicates = [];
    $keys = [];
    
    foreach ($kzTranslations as $key => $value) {
        if (in_array($key, $keys)) {
            $duplicates[] = $key;
        }
        $keys[] = $key;
    }
    
    if (empty($duplicates)) {
        echo "‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
    } else {
        echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: " . implode(', ', $duplicates) . "\n";
    }
} else {
    echo "‚ùå –ö–∞–∑–∞—Ö—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
echo "\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware...\n";
$middlewarePath = app_path('Http/Middleware/AutoLanguageDetectionMiddleware.php');
if (file_exists($middlewarePath)) {
    echo "‚úÖ Middleware –Ω–∞–π–¥–µ–Ω\n";
    
    $kernelPath = app_path('Http/Kernel.php');
    $kernelContent = file_get_contents($kernelPath);
    if (strpos($kernelContent, 'AutoLanguageDetectionMiddleware') !== false) {
        echo "‚úÖ Middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Kernel\n";
    } else {
        echo "‚ùå Middleware –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Kernel\n";
    }
} else {
    echo "‚ùå Middleware –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
echo "\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤...\n";
$apiPath = base_path('routes/api.php');
$apiContent = file_get_contents($apiPath);
if (strpos($apiContent, 'TranslationAPIController') !== false) {
    echo "‚úÖ API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n";
} else {
    echo "‚ùå API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n";
}

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —É—Ç–∏–ª–∏—Ç—ã
echo "\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —É—Ç–∏–ª–∏—Ç—ã...\n";
$jsPath = resource_path('js/Utils/TranslationHelper.js');
if (file_exists($jsPath)) {
    echo "‚úÖ JavaScript —É—Ç–∏–ª–∏—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞\n";
} else {
    echo "‚ùå JavaScript —É—Ç–∏–ª–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
}

// 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MediaSlider
echo "\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MediaSlider...\n";
$componentPath = resource_path('js/Components/MediaSlider.jsx');
if (file_exists($componentPath)) {
    $componentContent = file_get_contents($componentPath);
    if (strpos($componentContent, 'window.translations') !== false) {
        echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã\n";
    } else {
        echo "‚ö†Ô∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã\n";
    }
} else {
    echo "‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
}

// 9. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo "\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
echo "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Google Translate API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env\n";
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤:\n";
echo "   php artisan translate:all --from=kz --to=ru,en\n";
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f storage/logs/laravel.log\n";
echo "4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∞–π—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏\n";

echo "\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
