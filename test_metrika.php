<?php

require_once 'vendor/autoload.php';

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Log;

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ\n";
echo "==========================================\n\n";

$token = env('YANDEX_METRIKA_TOKEN');
$counter = env('YANDEX_METRIKA_COUNTER');

if (!$token || !$counter) {
    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n";
    echo "–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:\n";
    echo "YANDEX_METRIKA_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω\n";
    echo "YANDEX_METRIKA_COUNTER=–≤–∞—à_id_—Å—á–µ—Ç—á–∏–∫–∞\n\n";
    echo "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ METRIKA_SETUP.md\n";
    exit(1);
}

echo "‚úÖ –¢–æ–∫–µ–Ω –∏ ID —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n";
echo "–¢–æ–∫–µ–Ω: " . substr($token, 0, 10) . "...\n";
echo "–°—á–µ—Ç—á–∏–∫: $counter\n\n";

try {
    $client = new Client(['timeout' => 10]);
    $today = date('Y-m-d');
    
    echo "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è ($today)...\n";
    
    $response = $client->get('https://api-metrika.yandex.net/stat/v1/data', [
        'headers' => [
            'Authorization' => 'OAuth ' . $token,
        ],
        'query' => [
            'ids' => $counter,
            'metrics' => 'ym:s:visitors,ym:s:pageviews,ym:s:avgSessionDuration',
            'date1' => $today,
            'date2' => $today,
        ],
    ]);
    
    $data = json_decode($response->getBody(), true);
    
    if (isset($data['data'][0]['metrics'])) {
        $metrics = $data['data'][0]['metrics'];
        echo "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n";
        echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n";
        echo "- –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: " . ($metrics[0] ?? 'N/A') . "\n";
        echo "- –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: " . ($metrics[1] ?? 'N/A') . "\n";
        echo "- –°—Ä–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: " . ($metrics[2] ?? 'N/A') . " —Å–µ–∫\n";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞\n";
        echo "–û—Ç–≤–µ—Ç: " . json_encode($data, JSON_PRETTY_PRINT) . "\n";
    }
    
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " . $e->getMessage() . "\n";
    echo "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n";
    echo "1. –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω\n";
    echo "2. –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—á–µ—Ç—á–∏–∫–∞\n";
    echo "3. –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—á–∏–∫—É\n";
    echo "4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n";
}

echo "\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n"; 