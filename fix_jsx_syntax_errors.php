<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ JSX —Ñ–∞–π–ª–∞—Ö
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É: const –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
 */

$filesToFix = [
    'resources/js/Pages/AboutCentre/Vacancy.jsx',
    'resources/js/Pages/Services/Training.jsx',
    'resources/js/Pages/Services/PostAccreditationMonitoring.jsx',
    'resources/js/Pages/Services/MedicalExpertise.jsx',
    'resources/js/Pages/Services/HealthTechAssessment.jsx',
    'resources/js/Pages/Services/EducationPrograms.jsx',
    'resources/js/Pages/Services/DrugExpertise.jsx',
    'resources/js/Pages/Services/AdsEvaluation.jsx',
    'resources/js/Pages/Services/Accreditation.jsx',
    'resources/js/Pages/News/Show.jsx',
    'resources/js/Pages/News/Index.jsx',
    'resources/js/Pages/Examples/TabDocumentsExample.jsx',
    'resources/js/Pages/Direction/TechCompetence.jsx',
    'resources/js/Pages/Direction/StrategicInitiatives.jsx',
    'resources/js/Pages/Direction/PrimaryHealthCare.jsx',
    'resources/js/Pages/Direction/NationalHealthAccounts.jsx',
    'resources/js/Pages/Direction/MedicalTourism.jsx',
    'resources/js/Pages/Direction/MedicalStatistics.jsx',
    'resources/js/Pages/Direction/MedicalScience.jsx',
    'resources/js/Pages/Direction/MedicalRating.jsx',
    'resources/js/Pages/Direction/MedicalOrganizationsRating.jsx',
    'resources/js/Pages/Direction/MedicalEducation.jsx',
    'resources/js/Pages/Direction/MedicalAccreditation.jsx',
    'resources/js/Pages/Direction/HumanResources.jsx',
    'resources/js/Pages/Direction/HealthRate.jsx',
    'resources/js/Pages/Direction/HealthAccounts.jsx',
    'resources/js/Pages/Direction/ElectronicHealth.jsx',
    'resources/js/Pages/Direction/DrugPolicy.jsx',
    'resources/js/Pages/Direction/ClinicalProtocols.jsx',
    'resources/js/Pages/Direction/CenterPrevention.jsx',
    'resources/js/Pages/Direction/Bioethics.jsx',
    'resources/js/Pages/Auth/ResetPassword.jsx',
    'resources/js/Pages/Auth/Register.jsx',
];

echo "=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ JSX —Ñ–∞–π–ª–∞—Ö ===\n\n";

$fixedCount = 0;
$errorCount = 0;

foreach ($filesToFix as $file) {
    if (!file_exists($file)) {
        echo "‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {$file}\n";
        $errorCount++;
        continue;
    }
    
    $content = file_get_contents($file);
    $originalContent = $content;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ
    if (preg_match('/export default function.*\(.*\n.*const.*usePage.*\n.*\n.*\{/', $content)) {
        echo "üîß –ò—Å–ø—Ä–∞–≤–ª—è—é: {$file}\n";
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç usePage
        if (!strpos($content, 'import {') || !strpos($content, 'usePage')) {
            // –î–æ–±–∞–≤–ª—è–µ–º usePage –≤ –∏–º–ø–æ—Ä—Ç
            $content = preg_replace(
                '/import \{ ([^}]+) \} from \'@inertiajs\/react\';/',
                'import { $1, usePage } from \'@inertiajs/react\';',
                $content
            );
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        $content = preg_replace(
            '/export default function (\w+)\(([^)]*)\)\s*\n\s*const \{ translations \} = usePage\(\)\.props;\s*\n\s*\/\/ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\s*\n\s*const t = \(key, fallback = \'\'\) => \{\s*\n\s*return translations\?\.[key\] \|\| fallback;\s*\n\s*\};/',
            'export default function $1($2) {\n    const { translations } = usePage().props;\n    \n    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n    const t = (key, fallback = \'\') => {\n        return translations?.[key] || fallback;\n    };',
            $content
        );
        
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        if ($content !== $originalContent) {
            file_put_contents($file, $content);
            echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {$file}\n";
            $fixedCount++;
        } else {
            echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {$file}\n";
            $errorCount++;
        }
    } else {
        echo "‚úì –£–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {$file}\n";
    }
}

echo "\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ===\n";
echo "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {$fixedCount}\n";
echo "–û—à–∏–±–æ–∫: {$errorCount}\n";
echo "–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " . count($filesToFix) . "\n";

echo "\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ===\n";
echo "–ó–∞–ø—É—Å–∫–∞—é npm run build...\n";

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
$output = shell_exec('npm run build 2>&1');
echo $output;

if (strpos($output, 'Build failed') !== false) {
    echo "\n‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –µ—â–µ –æ—à–∏–±–∫–∏.\n";
} else {
    echo "\n‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n";
}
