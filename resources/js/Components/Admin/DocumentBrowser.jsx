import React, { useState } from 'react';
import { 
    DocumentIcon, 
    FolderIcon, 
    PencilIcon, 
    TrashIcon, 
    ArrowRightIcon,
    EyeIcon
} from '@heroicons/react/24/outline';

export default function DocumentBrowser({ 
    documents, 
    directories, 
    currentPath, 
    loading, 
    onDocumentSelect, 
    onRename, 
    onMove, 
    onDelete,
    onFolderChange,
    onFiltersChange,
    filters = {}
}) {
    const [editingItem, setEditingItem] = useState(null);
    const [newName, setNewName] = useState('');
    const [showMoveModal, setShowMoveModal] = useState(false);
    const [moveTarget, setMoveTarget] = useState('');
    const [selectedItem, setSelectedItem] = useState(null);

    const handleRename = (item) => {
        setEditingItem(item);
        setNewName(item.name);
    };

    const handleRenameSubmit = async () => {
        if (!newName.trim()) return;
        
        const result = await onRename(editingItem, newName.trim());
        
        if (result.success) {
            setEditingItem(null);
            setNewName('');
        } else {
            alert(result.message);
        }
    };

    const handleMove = (item) => {
        setSelectedItem(item);
        setShowMoveModal(true);
    };

    const handleMoveSubmit = async () => {
        if (!moveTarget.trim()) return;
        
        const newPath = moveTarget.trim();
        const result = await onMove(selectedItem, newPath);
        
        if (result.success) {
            setShowMoveModal(false);
            setSelectedItem(null);
            setMoveTarget('');
        } else {
            alert(result.message);
        }
    };

    const handleDelete = async (item) => {
        const result = await onDelete(item);
        if (!result.success) {
            alert(result.message);
        }
    };

    const formatFileSize = (bytes) => {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    const getFileIcon = (extension) => {
        switch (extension.toLowerCase()) {
            case 'pdf':
                return 'üìÑ';
            case 'doc':
            case 'docx':
                return 'üìù';
            case 'xls':
            case 'xlsx':
                return 'üìä';
            case 'ppt':
            case 'pptx':
                return 'üìã';
            case 'jpg':
            case 'jpeg':
            case 'png':
            case 'gif':
                return 'üñºÔ∏è';
            default:
                return 'üìÑ';
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center py-12">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
        );
    }

    // –†–∞–∑–¥–µ–ª—ã –º–µ–¥–∏—Ü–∏–Ω—ã
    const medicineSections = [
        { value: '', label: '–í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–¥–∏—Ü–∏–Ω—ã' },
        { value: 'cardiology', label: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è' },
        { value: 'neurology', label: '–ù–µ–≤—Ä–æ–ª–æ–≥–∏—è' },
        { value: 'oncology', label: '–û–Ω–∫–æ–ª–æ–≥–∏—è' },
        { value: 'pediatrics', label: '–ü–µ–¥–∏–∞—Ç—Ä–∏—è' },
        { value: 'surgery', label: '–•–∏—Ä—É—Ä–≥–∏—è' },
        { value: 'gastroenterology', label: '–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥–∏—è' },
        { value: 'pulmonology', label: '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥–∏—è' },
        { value: 'endocrinology', label: '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è' },
        { value: 'urology', label: '–£—Ä–æ–ª–æ–≥–∏—è' },
        { value: 'ophthalmology', label: '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—è' },
        { value: 'otolaryngology', label: '–û—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥–∏—è' },
        { value: 'dermatology', label: '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è' },
        { value: 'infectious', label: '–ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏' },
        { value: 'psychiatry', label: '–ü—Å–∏—Ö–∏–∞—Ç—Ä–∏—è' },
        { value: 'rheumatology', label: '–†–µ–≤–º–∞—Ç–æ–ª–æ–≥–∏—è' },
        { value: 'traumatology', label: '–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥–∏—è –∏ –æ—Ä—Ç–æ–ø–µ–¥–∏—è' }
    ];

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–ö–ë
    const mkbCategories = [
        { value: '', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–ö–ë' },
        { value: 'A00-B99', label: 'A00-B99 –ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏ –ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏' },
        { value: 'C00-D48', label: 'C00-D48 –ù–æ–≤–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' },
        { value: 'D50-D89', label: 'D50-D89 –ë–æ–ª–µ–∑–Ω–∏ –∫—Ä–æ–≤–∏ –∏ –∫—Ä–æ–≤–µ—Ç–≤–æ—Ä–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤' },
        { value: 'E00-E90', label: 'E00-E90 –ë–æ–ª–µ–∑–Ω–∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã' },
        { value: 'F01-F99', label: 'F01-F99 –ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' },
        { value: 'G00-G99', label: 'G00-G99 –ë–æ–ª–µ–∑–Ω–∏ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã' },
        { value: 'H00-H59', label: 'H00-H59 –ë–æ–ª–µ–∑–Ω–∏ –≥–ª–∞–∑–∞' },
        { value: 'H60-H95', label: 'H60-H95 –ë–æ–ª–µ–∑–Ω–∏ —É—Ö–∞' },
        { value: 'I00-I99', label: 'I00-I99 –ë–æ–ª–µ–∑–Ω–∏ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è' },
        { value: 'J00-J99', label: 'J00-J99 –ë–æ–ª–µ–∑–Ω–∏ –æ—Ä–≥–∞–Ω–æ–≤ –¥—ã—Ö–∞–Ω–∏—è' },
        { value: 'K00-K93', label: 'K00-K93 –ë–æ–ª–µ–∑–Ω–∏ –æ—Ä–≥–∞–Ω–æ–≤ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è' },
        { value: 'L00-L99', label: 'L00-L99 –ë–æ–ª–µ–∑–Ω–∏ –∫–æ–∂–∏' },
        { value: 'M00-M99', label: 'M00-M99 –ë–æ–ª–µ–∑–Ω–∏ –∫–æ—Å—Ç–Ω–æ-–º—ã—à–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã' },
        { value: 'N00-N99', label: 'N00-N99 –ë–æ–ª–µ–∑–Ω–∏ –º–æ—á–µ–ø–æ–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã' },
        { value: 'O00-O99', label: 'O00-O99 –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å, —Ä–æ–¥—ã –∏ –ø–æ—Å–ª–µ—Ä–æ–¥–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥' },
        { value: 'P00-P96', label: 'P00-P96 –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ –ø–µ—Ä–∏–Ω–∞—Ç–∞–ª—å–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ' },
        { value: 'Q00-Q99', label: 'Q00-Q99 –í—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏' },
        { value: 'R00-R99', label: 'R00-R99 –°–∏–º–ø—Ç–æ–º—ã, –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã' },
        { value: 'S00-T98', label: 'S00-T98 –¢—Ä–∞–≤–º—ã, –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω' },
        { value: 'U00-U99', label: 'U00-U99 –ö–æ–¥—ã –¥–ª—è –æ—Å–æ–±—ã—Ö —Ü–µ–ª–µ–π' },
        { value: 'V01-Y98', label: 'V01-Y98 –í–Ω–µ—à–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ –∏ —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç–∏' },
        { value: 'Z00-Z99', label: 'Z00-Z99 –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è' }
    ];

    // –ì–æ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç)
    const currentYear = new Date().getFullYear();
    const years = [
        { value: '', label: '–í—Å–µ –≥–æ–¥—ã' },
        ...Array.from({ length: 10 }, (_, i) => ({
            value: (currentYear - i).toString(),
            label: (currentYear - i).toString()
        }))
    ];

    const handleFilterChange = (filterType, value) => {
        if (onFiltersChange) {
            onFiltersChange({
                ...filters,
                [filterType]: value
            });
        }
    };

    return (
        <div className="space-y-6">
            {/* –¢–µ–∫—É—â–∏–π –ø—É—Ç—å */}
            <div className="flex items-center text-sm text-gray-600">
                <span>–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞:</span>
                <span className="ml-2 font-medium text-gray-900">{currentPath}</span>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã */}
            <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="text-lg font-medium text-gray-900 mb-4">–§–∏–ª—å—Ç—Ä—ã</h3>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    {/* –ü–æ–∏—Å–∫ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–∏—Å–∫</label>
                        <input
                            type="text"
                            value={filters.search || ''}
                            onChange={(e) => handleFilterChange('search', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
                        />
                    </div>

                    {/* –†–∞–∑–¥–µ–ª –º–µ–¥–∏—Ü–∏–Ω—ã */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">–†–∞–∑–¥–µ–ª –º–µ–¥–∏—Ü–∏–Ω—ã</label>
                        <select
                            value={filters.medicine || ''}
                            onChange={(e) => handleFilterChange('medicine', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                            {medicineSections.map((section) => (
                                <option key={section.value} value={section.value}>{section.label}</option>
                            ))}
                        </select>
                    </div>

                    {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ú–ö–ë */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ú–ö–ë</label>
                        <select
                            value={filters.mkb || ''}
                            onChange={(e) => handleFilterChange('mkb', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                            {mkbCategories.map((mkb) => (
                                <option key={mkb.value} value={mkb.value}>{mkb.label}</option>
                            ))}
                        </select>
                    </div>

                    {/* –ì–æ–¥ */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">–ì–æ–¥</label>
                        <select
                            value={filters.year || ''}
                            onChange={(e) => handleFilterChange('year', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                            {years.map((year) => (
                                <option key={year.value} value={year.value}>{year.label}</option>
                            ))}
                        </select>
                    </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
                <div className="mt-4 flex justify-end">
                    <button
                        onClick={() => onFiltersChange && onFiltersChange({})}
                        className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors"
                    >
                        –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                    </button>
                </div>
            </div>

            {/* –ü–∞–ø–∫–∏ */}
            {directories.length > 0 && (
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-3">–ü–∞–ø–∫–∏</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {directories.map((dir) => (
                            <div
                                key={dir.path}
                                className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer group"
                                onClick={() => onFolderChange(currentPath + '/' + dir.name)}
                            >
                                <FolderIcon className="h-8 w-8 text-blue-500 mr-3" />
                                <div className="flex-1 min-w-0">
                                    <p className="text-sm font-medium text-gray-900 truncate">
                                        {dir.name}
                                    </p>
                                    <p className="text-xs text-gray-500">
                                        –ò–∑–º–µ–Ω–µ–Ω: {new Date(dir.modified).toLocaleDateString()}
                                    </p>
                                </div>
                                <ArrowRightIcon className="h-4 w-4 text-gray-400 group-hover:text-gray-600" />
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {/* –î–æ–∫—É–º–µ–Ω—Ç—ã */}
            {documents.length > 0 && (
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-3">–î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                    <div className="bg-white shadow overflow-hidden sm:rounded-md">
                        <ul className="divide-y divide-gray-200">
                            {documents.map((doc) => (
                                <li key={doc.path} className="px-6 py-4">
                                    <div className="flex items-center justify-between">
                                        <div className="flex items-center flex-1 min-w-0">
                                            <span className="text-2xl mr-3">
                                                {getFileIcon(doc.extension)}
                                            </span>
                                            <div className="flex-1 min-w-0">
                                                {editingItem?.path === doc.path ? (
                                                    <div className="flex items-center space-x-2">
                                                        <input
                                                            type="text"
                                                            value={newName}
                                                            onChange={(e) => setNewName(e.target.value)}
                                                            className="flex-1 px-2 py-1 border border-gray-300 rounded text-sm"
                                                            onKeyPress={(e) => e.key === 'Enter' && handleRenameSubmit()}
                                                            autoFocus
                                                        />
                                                        <button
                                                            onClick={handleRenameSubmit}
                                                            className="px-2 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700"
                                                        >
                                                            ‚úì
                                                        </button>
                                                        <button
                                                            onClick={() => setEditingItem(null)}
                                                            className="px-2 py-1 bg-gray-600 text-white rounded text-sm hover:bg-gray-700"
                                                        >
                                                            ‚úï
                                                        </button>
                                                    </div>
                                                ) : (
                                                    <p className="text-sm font-medium text-gray-900 truncate">
                                                        {doc.name}
                                                    </p>
                                                )}
                                                <div className="flex items-center space-x-4 text-xs text-gray-500">
                                                    <span>{formatFileSize(doc.size)}</span>
                                                    <span>‚Ä¢</span>
                                                    <span>–ò–∑–º–µ–Ω–µ–Ω: {new Date(doc.modified).toLocaleDateString()}</span>
                                                    {doc.year && (
                                                        <>
                                                            <span>‚Ä¢</span>
                                                            <span>–ì–æ–¥: {doc.year}</span>
                                                        </>
                                                    )}
                                                </div>
                                                {(doc.medicine || doc.mkb) && (
                                                    <div className="flex items-center space-x-4 text-xs text-blue-600 mt-1">
                                                        {doc.medicine && (
                                                            <span className="bg-blue-100 px-2 py-1 rounded">
                                                                {doc.medicine}
                                                            </span>
                                                        )}
                                                        {doc.mkb && (
                                                            <span className="bg-green-100 px-2 py-1 rounded">
                                                                –ú–ö–ë: {doc.mkb}
                                                            </span>
                                                        )}
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                        
                                        <div className="flex items-center space-x-2">
                                            {['pdf', 'jpg', 'jpeg', 'png', 'gif'].includes(doc.extension?.toLowerCase()) && (
                                                <button
                                                    onClick={() => onDocumentSelect(doc)}
                                                    className="p-2 text-gray-400 hover:text-blue-600"
                                                    title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"
                                                >
                                                    <EyeIcon className="h-4 w-4" />
                                                </button>
                                            )}
                                            <button
                                                onClick={() => handleRename(doc)}
                                                className="p-2 text-gray-400 hover:text-yellow-600"
                                                title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"
                                            >
                                                <PencilIcon className="h-4 w-4" />
                                            </button>
                                            <button
                                                onClick={() => handleMove(doc)}
                                                className="p-2 text-gray-400 hover:text-blue-600"
                                                title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"
                                            >
                                                <ArrowRightIcon className="h-4 w-4" />
                                            </button>
                                            <button
                                                onClick={() => handleDelete(doc)}
                                                className="p-2 text-gray-400 hover:text-red-600"
                                                title="–£–¥–∞–ª–∏—Ç—å"
                                            >
                                                <TrashIcon className="h-4 w-4" />
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    </div>
                </div>
            )}

            {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
            {documents.length === 0 && directories.length === 0 && (
                <div className="text-center py-12">
                    <DocumentIcon className="mx-auto h-12 w-12 text-gray-400" />
                    <h3 className="mt-2 text-sm font-medium text-gray-900">–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
                    <p className="mt-1 text-sm text-gray-500">
                        –í —ç—Ç–æ–π –ø–∞–ø–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–∞–ø–æ–∫.
                    </p>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */}
            {showMoveModal && (
                <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                    <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                        <div className="mt-3">
                            <h3 className="text-lg font-medium text-gray-900 mb-4">
                                –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å "{selectedItem?.name}"
                            </h3>
                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    –ù–æ–≤—ã–π –ø—É—Ç—å:
                                </label>
                                <input
                                    type="text"
                                    value={moveTarget}
                                    onChange={(e) => setMoveTarget(e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã/–ù–æ–≤–∞—è –ø–∞–ø–∫–∞/—Ñ–∞–π–ª.pdf"
                                />
                            </div>
                            <div className="flex justify-end space-x-3">
                                <button
                                    onClick={() => setShowMoveModal(false)}
                                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </button>
                                <button
                                    onClick={handleMoveSubmit}
                                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                                >
                                    –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
