const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
const filesToFix = [
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (Direction)
    'resources/js/Pages/Direction/MedicalEducation.jsx',
    'resources/js/Pages/Direction/HumanResources.jsx',
    'resources/js/Pages/Direction/ElectronicHealth.jsx',
    'resources/js/Pages/Direction/MedicalAccreditation.jsx',
    'resources/js/Pages/Direction/HealthRate.jsx',
    'resources/js/Pages/Direction/ClinicalProtocols.jsx',
    'resources/js/Pages/Direction/MedicalScience.jsx',
    'resources/js/Pages/Direction/Bioethics.jsx',
    'resources/js/Pages/Direction/DrugPolicy.jsx',
    'resources/js/Pages/Direction/PrimaryHealthCare.jsx',
    'resources/js/Pages/Direction/HealthAccounts.jsx',
    'resources/js/Pages/Direction/CenterPrevention.jsx',
    'resources/js/Pages/Direction/TechCompetence.jsx',
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ª—É–≥ (Services)
    'resources/js/Pages/Services/Training.jsx',
    'resources/js/Pages/Services/MedicalExpertise.jsx',
    'resources/js/Pages/Services/HealthTechAssessment.jsx',
    'resources/js/Pages/Services/DrugExpertise.jsx',
    'resources/js/Pages/Services/AdsEvaluation.jsx',
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–æ—Å—Ç–µ–π (News)
    'resources/js/Pages/News/Show.jsx',
    'resources/js/Pages/News/Index.jsx',
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã –æ —Ü–µ–Ω—Ç—Ä–µ (AboutCentre)
    'resources/js/Pages/AboutCentre/Vacancy.jsx',
    'resources/js/Pages/AboutCentre/Vacancies.jsx',
    'resources/js/Pages/AboutCentre/SalidatKairbekova.jsx',
    'resources/js/Pages/AboutCentre/Partners.jsx',
    'resources/js/Pages/AboutCentre/FAQ.jsx',
    'resources/js/Pages/AboutCentre/Contacts.jsx'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
    if (!fs.existsSync(filePath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return { success: false, error: 'File not found' };
    }

    try {
        let content = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const hasLayout = content.includes('.layout =');
        const hasGlobalT = /const\s+t\s*=\s*\(.*\)\s*=>\s*\{[\s\S]*?window\.__INERTIA_PROPS__/.test(content);
        const usesTInLayout = hasLayout && /\.layout\s*=\s*.*t\(/.test(content);
        
        if (!hasLayout || hasGlobalT || !usesTInLayout) {
            return { success: false, error: 'No fix needed' };
        }

        // –®–∞–≥ 1: –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é t –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        const lines = content.split('\n');
        const lastImportIndex = lines.findLastIndex(line => line.trim().startsWith('import'));
        
        if (lastImportIndex === -1) {
            return { success: false, error: 'No imports found' };
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é t
        const globalTFunction = [
            '',
            '// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞',
            'const t = (key, fallback = \'\') => {',
            '    return window.__INERTIA_PROPS__?.translations?.[key] || fallback;',
            '};',
            ''
        ];
        
        lines.splice(lastImportIndex + 1, 0, ...globalTFunction);
        content = lines.join('\n');

        // –®–∞–≥ 2: –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é t –Ω–∞ tComponent
        content = content.replace(
            /const\s+t\s*=\s*\(.*?\)\s*=>\s*\{[\s\S]*?translations\?\.[^\}]*\|\|.*?\};/g,
            '// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞\n    const tComponent = (key, fallback = \'\') => {\n        return translations?.[key] || fallback;\n    };'
        );

        // –®–∞–≥ 3: –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ t –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ tComponent (–Ω–æ –Ω–µ –≤ layout)
        // –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏
        const parts = content.split('export default function');
        if (parts.length > 1) {
            const beforeComponent = parts[0];
            const afterComponent = parts[1];
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–¥–æ layout)
            const layoutIndex = afterComponent.indexOf('.layout =');
            if (layoutIndex !== -1) {
                const componentContent = afterComponent.substring(0, layoutIndex);
                const layoutContent = afterComponent.substring(layoutIndex);
                
                // –ó–∞–º–µ–Ω—è–µ–º t –Ω–∞ tComponent —Ç–æ–ª—å–∫–æ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                const fixedComponentContent = componentContent.replace(/t\(/g, 'tComponent(');
                
                content = beforeComponent + 'export default function' + fixedComponentContent + layoutContent;
            } else {
                // –ï—Å–ª–∏ layout –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–º–µ–Ω—è–µ–º –≤–æ –≤—Å–µ–º –ø–æ—Å–ª–µ export default function
                const fixedAfterComponent = afterComponent.replace(/t\(/g, 'tComponent(');
                content = beforeComponent + 'export default function' + fixedAfterComponent;
            }
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(filePath, content, 'utf8');
        
        return { success: true, filePath };
        
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üîß –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ const –∏ —Ñ—É–Ω–∫—Ü–∏–π t...\n');
    
    let successCount = 0;
    let errorCount = 0;
    const results = [];
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    const backupDir = './backups_improved_' + new Date().toISOString().replace(/[:.]/g, '-');
    if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir);
    }
    
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: ${backupDir}\n`);
    
    filesToFix.forEach((filePath, index) => {
        console.log(`[${index + 1}/${filesToFix.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞: ${filePath}`);
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if (fs.existsSync(filePath)) {
            const backupPath = path.join(backupDir, path.basename(filePath) + '.backup');
            try {
                fs.copyFileSync(filePath, backupPath);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: ${error.message}`);
            }
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        const result = fixFile(filePath);
        
        if (result.success) {
            console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
            successCount++;
            results.push({ filePath, status: 'success' });
        } else {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${filePath} - ${result.error}`);
            errorCount++;
            results.push({ filePath, status: 'error', error: result.error });
        }
    });
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìÅ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${filesToFix.length}`);
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (successCount > 0) {
        console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
        results.filter(r => r.status === 'success').forEach(result => {
            console.log(`   - ${result.filePath}`);
        });
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    if (errorCount > 0) {
        console.log('\n‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:');
        results.filter(r => r.status === 'error').forEach(result => {
            console.log(`   - ${result.filePath}: ${result.error}`);
        });
    }
    
    console.log(`\nüíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${backupDir}`);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ!');
    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
main();
